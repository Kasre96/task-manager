openapi: 3.0.0
info:
  title: Task Manager
  version: "1.0.0"
  description: Operations for a user to manage their tasks and admin to manage users.

servers:
  - url: http://127.0.0.1:5000/api
    description: Developent Server

paths:
  /users/create:
    post:
      operationId: app.users.create_user
      tags:
        - Users
      description: >
        Add user to database
      summary: Add a user to database
      requestBody:
        required: true
        description: User to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: User's unique name
                  type: string
                email:
                  description: User's unique email
                  type: string
                password:
                  description: User's raw password
                  type: string
      responses:
        201:
          description: Successfully add a user to database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        409:
          description: User already exixts in database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /users:
    get:
      operationId: app.users.read_all
      tags:
        - Users
      summary: Fetch all users in Database
      description: Return a list of all users found in database
      responses:
        200:
          description: Successfully fetch a list of all users
        404:
          description: No users found on database
  /users/{username}:
    get:
      operationId: app.users.read_one
      tags:
        - Users
      description: Fetch a user by username
      summary: Fetch one user from database
      parameters:
        - name: username
          in: path
          description: First name of user to retrieved
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully read a user from database
        404:
          description: User not found in database
  /users/{name}/update:
    put:
      operationId: app.users.update_user
      tags:
        - Users
      description: Update user
      summary: Fetch one user from database and update them
      requestBody:
        required: true
        description: User to be updated
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: User's unique name
                  type: string
                email:
                  description: User's unique email
                  type: string
      parameters:
        - name: name
          in: path
          description: First name of user to updated
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully update a user
        500:
          description: Error updating user
        404:
          description: User not found
  /users/{username}/delete:
    delete:
      operationId: app.users.delete_user
      tags:
        - Users
      description: Delete user
      summary: Fetch one user from database and delete them
      parameters:
        - name: username
          in: path
          description: First name of user to deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully delete a user
        500:
          description: Error deleting user
  /tasks/create:
    post:
      operationId: app.tasks.create_task
      tags:
        - Tasks
      description: >
        Add task to database
      summary: Add a task to database
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: task to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  description: Title of the task
                  type: string
                description:
                  description: A short description of the task
                  type: string
      responses:
        201:
          description: Successfully add a task to database
        400:
          description: Invalid task body.
        401:
          description: Access token missing or invalid
  /tasks:
    get:
      operationId: app.tasks.fetch_all
      tags:
        - Tasks
      summary: Fetch all tasks in Database
      description: Return a list of all tasks for all users
      responses:
        200:
          description: Successfully fetch a list of all tasks
        404:
          description: No tasks found in database
  /tasks/{id}:
    get:
      operationId: app.tasks.fetch_one
      tags:
        - Tasks
      description: Fetch a task by id
      summary: Fetch one task from database
      parameters:
        - name: id
          in: path
          description: Id of task to be retrieved
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully fetch a task from database
        404:
          description: Task not found in database
  /tasks/{id}/update:
    put:
      operationId: app.tasks.update_task
      tags:
        - Tasks
      description: Update task
      summary: Fetch one task from database and update it
      requestBody:
        required: true
        description: Task to be updated
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  description: Title of the task
                  type: string
                description:
                  description: A short description of the task
                  type: string
                status:
                  description: Status of the task
                  type: string
      parameters:
        - name: id
          in: path
          description: id of task to updated
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully update a task
        500:
          description: Error updating task
        404:
          description: Task not found
        400:
          description: Invalid request body. JSON expected
  /tasks/{id}/delete:
    delete:
      operationId: app.tasks.delete_task
      tags:
        - Tasks
      description: Delete task
      summary: Delete task from database
      parameters:
        - name: id
          in: path
          description: id of task to deleted
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully delete a task
        500:
          description: Error deleting task

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: app.tasks.decode_jwt_token
