openapi: 3.0.0
info:
  title: Task Manager
  version: "1.0.0"
  description: Operations for a user to manage their tasks and admin to manage users.
  contact:
    name: Developer
    email: isaka.muia@gmail.com

tags:
  - name: Admin
    description: Admin operations
  - name: Tasks
    description: Task operations
  - name: Users
    description: User operations

servers:
  - url: http://127.0.0.1:5000/api
    description: Developent Server
  - url: http://mytaskmanager101/api
    description: Production Server

paths:
  /users/create:
    post:
      operationId: app.api.users.create_user
      tags:
        - Admin
      description: >
        Add new user to database
      summary: Add a user to database
      requestBody:
        required: true
        description: User to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: User's unique name
                  type: string
                email:
                  description: User's unique email
                  type: string
                password:
                  description: User's raw password
                  type: string
      responses:
        201:
          description: Successfully add a user to database
        409:
          description: User already exixts in database
        401:
          description: Invalid or missing autjentication token.
  /users/login:
    post:
      operationId: app.api.users.login_user
      tags:
        - Admin
      description: >
        Login user
      summary: Login user
      requestBody:
        required: true
        description: User to be logged in
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: User's unique name
                  type: string
                password:
                  description: User's raw password
                  type: string
      responses:
        200:
          description: Successfully login user
        404:
          description: Invalid username or password
        400:
          description: Invalid request body. JSON expected.
  /users:
    get:
      operationId: app.api.users.read_all
      tags:
        - Admin
      summary: Fetch all users in Database
      description: Return a list of all users found in database
      responses:
        200:
          description: Successfully fetch a list of all users
        404:
          description: No users found on database
  /users/{id}:
    get:
      operationId: app.api.users.read_one
      tags:
        - Users
      description: Fetch a user by username
      summary: Fetch one user from database
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of user to retrieved
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully read a user from database
        404:
          description: User not found in database
  /users/{id}/update:
    put:
      operationId: app.api.users.update_user
      tags:
        - Users
      description: Update user
      summary: Fetch one user from database and update them
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: User to be updated
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: User's unique name
                  type: string
                email:
                  description: User's unique email
                  type: string
      parameters:
        - name: id
          in: path
          description: id of user to updated
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully update a user
        500:
          description: Error updating user
        404:
          description: User not found
  /users/{id}/delete:
    delete:
      operationId: app.api.users.delete_user
      tags:
        - Users
      description: Delete user
      summary: Fetch one user from database and delete them
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of user to deleted
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully delete a user
        500:
          description: Error deleting user
  /users/{id}/tasks:
    get:
      operationId: app.api.users.user_tasks
      tags:
        - Users
      description: Fetch all tasks belonging to that particular user
      summary: Fetch a users tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully fetch user's tasks
        400:
          description: Error deleting user

  /tasks/create:
    post:
      operationId: app.api.tasks.create_task
      tags:
        - Tasks
      description: >
        Add task to database
      summary: Add a task to database
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: task to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  description: Title of the task
                  type: string
                description:
                  description: A short description of the task
                  type: string
      responses:
        201:
          description: Successfully add a task to database
        400:
          description: Invalid task body.
        401:
          description: Access token missing or invalid
  /tasks:
    get:
      operationId: app.api.tasks.fetch_all
      tags:
        - Tasks
      summary: Fetch all tasks in Database
      description: Return a list of all tasks for all users
      responses:
        200:
          description: Successfully fetch a list of all tasks
        404:
          description: No tasks found in database
  /users/{uid}/tasks/{id}:
    get:
      operationId: app.api.users.user_single_task
      tags:
        - Users
      description: Fetch a single task for a user
      summary: Fetch one user's task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Id of task to be retrieved
          required: true
          schema:
            type: integer
        - name: uid
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully fetch a task from database
        404:
          description: Task/User not found in database
  /users/{uid}/tasks/{id}/update:
    put:
      operationId: app.api.users.update_user_task
      tags:
        - Users
      description: Update a user's task
      summary: Update user task
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Task to be updated
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  description: Title of the task
                  type: string
                description:
                  description: A short description of the task
                  type: string
                status:
                  description: Status of the task
                  type: string
      parameters:
        - name: id
          in: path
          description: id of task to updated
          required: true
          schema:
            type: integer
        - name: uid
          in: path
          description: id of user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully update a task
        500:
          description: Error updating task
        404:
          description: Task/User not found
        400:
          description: Invalid request body. JSON expected
  /users/{uid}/tasks/{id}/delete:
    delete:
      operationId: app.api.users.delete_user_task
      tags:
        - Users
      description: Delete a users task
      summary: Delete a users task from database
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of task to deleted
          required: true
          schema:
            type: integer
        - name: uid
          in: path
          description: id of user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully delete a task
        500:
          description: Error deleting task
        404:
          description: User/Task not found.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: app.api.tasks.decode_jwt_token
